{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Workspace\\\\cursos\\\\moveit\\\\src\\\\contexts\\\\ChallengeContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nimport challenges from \"../../challenges.json\";\nimport LevalUpModal from \"../components/LevalUpModal\";\nexport const ChallengsContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengsCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Novo desafio ðŸŽ‰\", {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n      new Audio(\"/notification.mp3\").play();\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallange() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengsCompleted(v => v + 1);\n  }\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set(\"level\", String(level));\n    Cookies.set(\"currentExperience\", String(currentExperience));\n    Cookies.set(\"challengesCompleted\", String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n  return /*#__PURE__*/_jsxDEV(ChallengsContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      activeChallenge,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      resetChallenge,\n      completeChallange,\n      closeLevelUpModal\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevalUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Workspace/cursos/moveit/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","LevalUpModal","ChallengsContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengsCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","setIsLevelUpModalOpen","experienceToNextLevel","Math","pow","levelUp","closeLevelUpModal","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Notification","permission","body","amount","Audio","play","resetChallenge","completeChallange","finalExperience","v","requestPermission","set","String"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\nimport challenges from \"../../challenges.json\";\r\nimport LevalUpModal from \"../components/LevalUpModal\";\r\n\r\ninterface Challenge {\r\n  type: \"body\" | \"eye\";\r\n  description: string;\r\n  amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n  level: number;\r\n  currentExperience: number;\r\n  challengesCompleted: number;\r\n  activeChallenge: Challenge;\r\n  experienceToNextLevel: number;\r\n  levelUp: () => void;\r\n  startNewChallenge: () => void;\r\n  resetChallenge: () => void;\r\n  completeChallange: () => void;\r\n  closeLevelUpModal: () => void;\r\n}\r\n\r\ninterface ChallengsProvider {\r\n  children: ReactNode;\r\n  level: number;\r\n  currentExperience: number;\r\n  challengesCompleted: number;\r\n}\r\n\r\nexport const ChallengsContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children, ...rest }: ChallengsProvider) {\r\n  const [level, setLevel] = useState(rest.level ?? 1);\r\n  const [currentExperience, setCurrentExperience] = useState(\r\n    rest.currentExperience ?? 0\r\n  );\r\n  const [challengesCompleted, setChallengsCompleted] = useState(\r\n    rest.challengesCompleted ?? 0\r\n  );\r\n\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n  const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false);\r\n\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n    setIsLevelUpModalOpen(true);\r\n  }\r\n\r\n  function closeLevelUpModal() {\r\n    setIsLevelUpModalOpen(false);\r\n  }\r\n\r\n  function startNewChallenge() {\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const challenge = challenges[randomChallengeIndex];\r\n\r\n    setActiveChallenge(challenge);\r\n\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Novo desafio ðŸŽ‰\", {\r\n        body: `Valendo ${challenge.amount}xp!`,\r\n      });\r\n\r\n      new Audio(\"/notification.mp3\").play();\r\n    }\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  function completeChallange() {\r\n    if (!activeChallenge) {\r\n      return;\r\n    }\r\n\r\n    const { amount } = activeChallenge;\r\n\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    if (finalExperience >= experienceToNextLevel) {\r\n      finalExperience = finalExperience - experienceToNextLevel;\r\n      levelUp();\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengsCompleted((v) => v + 1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    Notification.requestPermission();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Cookies.set(\"level\", String(level));\r\n    Cookies.set(\"currentExperience\", String(currentExperience));\r\n    Cookies.set(\"challengesCompleted\", String(challengesCompleted));\r\n  }, [level, currentExperience, challengesCompleted]);\r\n\r\n  return (\r\n    <ChallengsContext.Provider\r\n      value={{\r\n        level,\r\n        currentExperience,\r\n        challengesCompleted,\r\n        activeChallenge,\r\n        experienceToNextLevel,\r\n        levelUp,\r\n        startNewChallenge,\r\n        resetChallenge,\r\n        completeChallange,\r\n        closeLevelUpModal,\r\n      }}\r\n    >\r\n      {children}\r\n\r\n      {isLevelUpModalOpen && <LevalUpModal />}\r\n    </ChallengsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}